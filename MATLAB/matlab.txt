MATLAB NOTES - ARRAYS & MATRICES

--> When you separate numbers by using spaces as shown in the previous task, MATLAB combines the numbers into a row vector, which is an array with one row and multiple columns (1-by-n). When you separate numbers by using semicolons, MATLAB creates a column vector (n-by-1).
x = [1;3]
x = 
    1
    3


--> You can use a combination of spaces and semicolons to create a matrix, which is an array with multiple rows and columns. When creating a matrix, you enter the elements row by row.
x = [3 4 5; 6 7 8]
x = 
    3    4    5
    6    7    8


--> For long vectors, entering individual numbers is not practical. An alternative, shorthand method for creating evenly spaced vectors is to use the colon operator (:) and specify only the start and end values.
y = 5:8
y = 
    5    6    7    8
Notice that square brackets are not needed when you use the : operator. The interval is 1 by default.. you can change it to any number by typing the interval in the middle xyz:interval:xyz


--> If you know the number of elements you want in a vector (instead of the spacing between each element), you can use the linspace function.
linspace(first,last,number_of_elements)

Note the use of commas (,) to separate inputs to the linspace function.
x = linspace(0,1,5)
x = 
    0    0.250    0.500    0.750    1.000


--> Both linspace and the : operator create row vectors. But what if you need a linearly spaced column vector? The transpose operator (') converts a row vector to a column vector.
x = 1:3
x =
    1    2    3

x = x'
x = 
    1
    2
    3


--> Many matrix creation functions allow you to input one number to create a square matrix (n-by-n) or input two numbers to create a rectangular matrix (m-by-n).
x = rand(2)
x = 
    0.8147    0.1270
    0.9058    0.9134

x = rand(2,3)
x = 
    0.6324    0.2785    0.9575
    0.0975    0.5469    0.9649


--> Most array creation functions accept the same inputs as rand. For example, the zeros and ones functions create matrices of all zeros and all ones, respectively.
x = ones(2,3)
x = 
    1    1    1
    1    1    1

_ _ __ _ __ _ __ _ _ _ __ _ _ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ _ 

_ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ __ _ 

ARRAY INDEXING AND MODIFICATION

--> You can extract values from an array using row-column indexing.
y = A(5,7)
This syntax extracts the value in the 5th row and 7th column of A and assigns the result to the variable y.


--> eg for a matrix "data" of 5*5 
	elements can be accesed like this ]
	
	x = data(end,5)  # last row and 3rd column wala element 
	
"end" is used to signify the last row or column


--> You can use the colon operator to specify a range of values. This code creates a matrix containing the first, second, and third rows of the matrix A.
x = A(1:3,:)


--> You can apply basic statistical functions in MATLAB to a vector to produce a single output. For example, the maximum value of a vector can be determined using the max function.
xMax = max(x)

--> You can also request two output variables from the size function. In this case, each variable contains the size of one of the dimensions of the input array. Use square brackets ([ ]) to request more than one output.
[xrow,xcol] = size(x)

--> You can find the maximum value of a vector and its corresponding index value using the max function. The first output from the max function is the maximum value of the input vector. When called with two outputs, the second output is the index value.
[xMax,idx] = max(x)


--> plot(colour, width , design  ) , legend, title, xlabel, ylabel





